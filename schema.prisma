// datasource db defines the database connection settings.
// It is configured for PostgreSQL and uses an environment variable for the connection URL.
// The 'extensions' feature enables the use of PostgreSQL-specific data types.
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

// generator db configures Prisma Client settings.
// It is set up to use Prisma Client Python with asyncio interface and specific features.
generator db {
  provider                    = "prisma-client-py"
  interface                   = "asyncio"
  recursive_type_depth        = 5
  previewFeatures             = ["postgresqlExtensions"]
  enable_experimental_decimal = true
}

model User {
  id              Int     @id @default(autoincrement())
  username        String  @unique
  role            Role
  hashed_password String
  disabled        Boolean @default(false)

  profiles Profile[]
  Schedule Schedule[]
  Payroll  Payroll[]
}

model Profile {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id])

  firstName String
  lastName  String
  email     String  @unique
  phone     String?
}

model InventoryItem {
  id        Int    @id @default(autoincrement())
  type      String
  name      String
  quantity  Int    @default(0)
  threshold Int    @default(10)
  unit      String

  logs      InventoryLog[]
  OrderItem OrderItem[]
}

model InventoryLog {
  id         Int           @id @default(autoincrement())
  itemId     Int
  item       InventoryItem @relation(fields: [itemId], references: [id])
  timestamp  DateTime      @default(now())
  changedBy  Int
  changeType String // "Received", "Used", "Adjusted"
  amount     Int
}

model Customer {
  id          Int     @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String  @unique
  phone       String?
  preferences Json?

  orders Order[]
}

model Order {
  id         Int         @id @default(autoincrement())
  customerId Int
  customer   Customer    @relation(fields: [customerId], references: [id])
  placedAt   DateTime    @default(now())
  status     OrderStatus @default(Pending)

  items OrderItem[]
}

model OrderItem {
  id       Int           @id @default(autoincrement())
  orderId  Int
  order    Order         @relation(fields: [orderId], references: [id])
  itemId   Int
  item     InventoryItem @relation(fields: [itemId], references: [id])
  quantity Int
}

model Schedule {
  id          Int      @id @default(autoincrement())
  event       String
  scheduledAt DateTime
  assignedTo  Int
  description String?

  staff User @relation(fields: [assignedTo], references: [id])
}

model Tree {
  id           Int              @id @default(autoincrement())
  location     String
  plantedAt    DateTime
  species      String
  healthStatus TreeHealthStatus @default(Healthy)

  treatments Treatment[]
}

model Treatment {
  id        Int      @id @default(autoincrement())
  treeId    Int
  tree      Tree     @relation(fields: [treeId], references: [id])
  treatedAt DateTime @default(now())
  type      String
  notes     String?
}

model Payroll {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  period    String // "2023-01"
  amount    Decimal
  processed DateTime @default(now())
}

enum Role {
  Admin
  InventoryManager
  SalesManager
  CustomerServiceRepresentative
  OrderFulfillmentOfficer
  SupplyChainCoordinator
  ReportingAnalyst
  HumanResourcesManager
}

enum OrderStatus {
  Pending
  Shipped
  Delivered
  Cancelled
}

enum TreeHealthStatus {
  Healthy
  NeedsAttention
  Critical
}